{
  "name": "gulp-uglify",
  "description": "Minify files with UglifyJS.",
  "version": "1.5.3",
  "author": {
    "name": "Terin Stock",
    "email": "terinjokes@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/terinjokes/gulp-uglify/issues"
  },
  "dependencies": {
    "deap": "^1.0.0",
    "fancy-log": "^1.0.0",
    "gulp-util": "^3.0.0",
    "isobject": "^2.0.0",
    "through2": "^2.0.0",
    "uglify-js": "2.6.2",
    "uglify-save-license": "^0.4.1",
    "vinyl-sourcemaps-apply": "^0.2.0"
  },
  "devDependencies": {
    "cmem": "^1.0.0",
    "coveralls": "^2.11.4",
    "gulp-concat": "^2.0.0",
    "gulp-sourcemaps": "^1.0.0",
    "istanbul": "^0.4.0",
    "tape": "^4.0.0",
    "vinyl": "^1.0.0",
    "xo": "^0.12.0"
  },
  "homepage": "https://github.com/terinjokes/gulp-uglify/",
  "keywords": [
    "gulpplugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/terinjokes/gulp-uglify.git"
  },
  "xo": {
    "space": true
  },
  "files": [
    "index.js",
    "minifier.js",
    "lib/"
  ],
  "scripts": {
    "test": "xo && istanbul cover ./node_modules/tape/bin/tape test/*.js",
    "coverage": "cat ./coverage/lcov.info | coveralls"
  },
  "readme": "# gulp-uglify [![Travis-CI Status](https://img.shields.io/travis/terinjokes/gulp-uglify/master.svg?label=Travis CI)](https://travis-ci.org/terinjokes/gulp-uglify) [![AppVeyor Status](https://img.shields.io/appveyor/ci/terinjokes/gulp-uglify/master.svg?label=AppVeyor)](https://ci.appveyor.com/project/terinjokes/gulp-uglify) [![](https://img.shields.io/npm/dm/gulp-uglify.svg)](https://www.npmjs.org/package/gulp-uglify) [![](https://img.shields.io/npm/v/gulp-uglify.svg)](https://www.npmjs.org/package/gulp-uglify) [![](https://img.shields.io/coveralls/terinjokes/gulp-uglify/master.svg)](https://coveralls.io/github/terinjokes/gulp-uglify)\n\n> Minify JavaScript with UglifyJS2.\n\n## Installation\n\nInstall package with NPM and add it to your development dependencies:\n\n`npm install --save-dev gulp-uglify`\n\n## Usage\n\n```javascript\nvar uglify = require('gulp-uglify');\n\ngulp.task('compress', function() {\n  return gulp.src('lib/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist'));\n});\n```\n\n## Options\n\n- `mangle`\n\n\tPass `false` to skip mangling names.\n\n- `output`\n\n\tPass an object if you wish to specify additional [output\n\toptions](http://lisperator.net/uglifyjs/codegen). The defaults are\n\toptimized for best compression.\n\n- `compress`\n\n\tPass an object to specify custom [compressor\n\toptions](http://lisperator.net/uglifyjs/compress). Pass `false` to skip\n\tcompression completely.\n\n- `preserveComments`\n\n\tA convenience option for `options.output.comments`. Defaults to preserving no\n\tcomments.\n\n\t- `all`\n\n\t\tPreserve all comments in code blocks\n\n\t- `license`\n\n\t\tAttempts to preserve comments that likely contain licensing information,\n\t\teven if the comment does not have directives such as `@license` or `/*!`.\n\n\t\tImplemented via the [`uglify-save-license`](https://github.com/shinnn/uglify-save-license)\n\t\tmodule, this option preserves a comment if one of the following is true:\n\n\t\t1. The comment is in the *first* line of a file\n\t\t2. A regular expression matches the string of the comment.\n\t\t\t\tFor example: `MIT`, `@license`, or `Copyright`.\n\t\t3. There is a comment at the *previous* line, and it matches 1, 2, or 3.\n\n\t- `function`\n\n\t\tSpecify your own comment preservation function. You will be passed the\n\t\tcurrent node and the current comment and are expected to return either\n\t\t`true` or `false`.\n\n\t- `some` (deprecated)\n\n\t\tPreserve comments that start with a bang (`!`) or include a Closure Compiler\n\t\tdirective (`@preserve`, `@license`, `@cc_on`).\n\t\tDeprecated in favor of the `license` option, documented above.\n\nYou can also pass the `uglify` function any of the options [listed\nhere](https://github.com/mishoo/UglifyJS2#the-simple-way) to modify\nUglifyJS's behavior.\n\n## Errors\n\n`gulp-uglify` emits an 'error' event if it is unable to minify a specific file.\nWherever possible, the PluginError object will contain the following properties:\n\n- `fileName`\n- `lineNumber`\n- `message`\n\nTo handle errors across your entire pipeline, see the\n[gulp](https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md#combining-streams-to-handle-errors) documentation.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-uglify@1.5.3",
  "_shasum": "60a00b3975aba4186442a494979e9dfa3f13d0d6",
  "_from": "gulp-uglify@*",
  "_resolved": "https://registry.npmjs.org/gulp-uglify/-/gulp-uglify-1.5.3.tgz"
}
