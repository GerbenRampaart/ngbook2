{
  "name": "es6-shim",
  "version": "0.35.0",
  "author": {
    "name": "Paul Miller",
    "url": "http://paulmillr.com"
  },
  "description": "ECMAScript 6 (Harmony) compatibility shims for legacy JavaScript engines",
  "keywords": [
    "ecmascript",
    "harmony",
    "es6",
    "shim",
    "promise",
    "promises",
    "setPrototypeOf",
    "map",
    "set",
    "__proto__"
  ],
  "homepage": "https://github.com/paulmillr/es6-shim/",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/paulmillr/es6-shim.git"
  },
  "main": "es6-shim",
  "scripts": {
    "test": "npm run lint && evalmd *.md && npm run tests-only",
    "tests-only": "npm run test:shim && npm run test:sham",
    "test:shim": "mocha test/*.js test/*/*.js",
    "test:sham": "mocha test-sham/*.js",
    "test:native": "NO_ES6_SHIM=1 npm run tests-only",
    "lint": "npm run lint:shim && npm run lint:sham",
    "lint:shim": "npm run jshint:shim && npm run jscs:shim && npm run eslint:shim",
    "lint:sham": "npm run jshint:sham && npm run jscs:sham && npm run eslint:sham",
    "eslint": "npm run eslint:shim && npm run eslint:sham",
    "eslint:shim": "eslint es6-shim.js test/*.js test/*/*.js",
    "eslint:sham": "eslint es6-sham.js test-sham/*.js",
    "jshint": "npm run jshint:shim && npm run jshint:sham",
    "jshint:shim": "jshint es6-shim.js test/*.js test/*/*.js",
    "jshint:sham": "jshint es6-sham.js test-sham/*.js",
    "jscs": "npm run jscs:shim && npm run jscs:sham",
    "jscs:shim": "jscs es6-shim.js test/*.js test/*/*.js",
    "jscs:sham": "jscs es6-sham.js test-sham/*.js",
    "minify": "npm run minify:shim && npm run minify:sham",
    "minify:shim": "uglifyjs es6-shim.js --keep-fnames --comments --source-map=es6-shim.map -m -b ascii_only=true,beautify=false > es6-shim.min.js",
    "minify:sham": "uglifyjs es6-sham.js --keep-fnames --comments --source-map=es6-sham.map -m -b ascii_only=true,beautify=false > es6-sham.min.js",
    "sauce-connect": "curl -L https://gist.githubusercontent.com/henrikhodne/9322897/raw/sauce-connect.sh | bash && export TRAVIS_SAUCE_CONNECT=true",
    "sauce": "npm run sauce-connect && grunt sauce"
  },
  "testling": {
    "html": "testling.html",
    "browsers": [
      "iexplore/6.0..latest",
      "firefox/3.0..6.0",
      "firefox/10.0",
      "firefox/15.0..latest",
      "firefox/nightly",
      "chrome/4.0..10.0",
      "chrome/20.0..latest",
      "chrome/canary",
      "opera/10.0..latest",
      "opera/next",
      "safari/4.0..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "^3.5.0",
    "es5-shim": "^4.5.2",
    "eslint": "^1.10.3",
    "@ljharb/eslint-config": "^1.6.1",
    "grunt": "^0.4.5",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-saucelabs": "^8.6.2",
    "jscs": "^2.9.0",
    "jshint": "^2.9.1",
    "mocha": "^2.4.5",
    "promises-aplus-tests": "^2.1.1",
    "promises-es6-tests": "^0.5.0",
    "uglify-js": "^2.6.1",
    "evalmd": "^0.0.16"
  },
  "readme": "# ES6 Shim\nProvides compatibility shims so that legacy JavaScript engines behave as\nclosely as possible to ECMAScript 6 (Harmony).\n\n[![Build Status][1]][2] [![dependency status][3]][4] [![dev dependency status][5]][6]\n\n[![browser support](https://ci.testling.com/paulmillr/es6-shim.png)](https://ci.testling.com/paulmillr/es6-shim)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/es6-shim.svg)](https://saucelabs.com/u/es6-shim)\n\n[HTML version of the final ECMAScript 6 spec][spec-html-url]\n\n## Installation\nIf you want to use it in browser:\n\n* Just include es6-shim before your scripts.\n* Include [es5-shim][es5-shim-url] especially if your browser doesn't support ECMAScript 5 - but every JS engine requires the `es5-shim` to correct broken implementations, so it's strongly recommended to always include it.\n\nFor `node.js`, `io.js`, or any `npm`-managed workflow (this is the recommended method):\n\n    npm install es6-shim\n\nAlternative methods:\n* `component install paulmillr/es6-shim` if you’re using [component(1)](https://github.com/componentjs/component).\n* `bower install es6-shim` if you’re using [Bower](http://bower.io/).\n\nIn both browser and node you may also want to include `unorm`; see the [`String.prototype.normalize`](#stringprototypenormalize) section for details.\n\n## Safe shims\n\n* `Map`, `Set` (requires ES5 property descriptor support)\n* `Promise`\n* `String`:\n    * `fromCodePoint()` ([a standalone shim is also available](http://mths.be/fromcodepoint))\n    * `raw()`\n* `String.prototype`:\n    * `codePointAt()` ([a standalone shim is also available](http://mths.be/codepointat))\n    * `endsWith()` ([a standalone shim is also available](http://mths.be/endswith))\n    * `includes()` ([a standalone shim is also available](http://mths.be/includes))\n    * `repeat()` ([a standalone shim is also available](http://mths.be/repeat))\n    * `startsWith()` ([a standalone shim is also available](http://mths.be/startswith))\n* `RegExp`:\n    * `new RegExp`, when given a RegExp as the pattern, will no longer throw when given a \"flags\" string argument. (requires ES5)\n* `RegExp.prototype`:\n    * `flags` (requires ES5) ([a standalone shim is also available](https://github.com/es-shims/RegExp.prototype.flags))\n    * `[Symbol.match]` (requires native `Symbol`s)\n    * `[Symbol.replace]` (requires native `Symbol`s)\n    * `[Symbol.search]` (requires native `Symbol`s)\n    * `[Symbol.split]` (requires native `Symbol`s)\n    * `toString`\n* `Number`:\n    * binary and octal literals: `Number('0b1')` and `Number('0o7')`\n    * `EPSILON`\n    * `MAX_SAFE_INTEGER`\n    * `MIN_SAFE_INTEGER`\n    * `isNaN()`([a standalone shim is also available](https://www.npmjs.com/package/is-nan))\n    * `isInteger()`\n    * `isSafeInteger()`\n    * `isFinite()`\n    * `parseInt()`\n    * `parseFloat()`\n* `Array`:\n    * `from()` ([a standalone shim is also available](https://www.npmjs.com/package/array.from))\n    * `of()` ([a standalone shim is also available](https://www.npmjs.com/package/array.of))\n* `Array.prototype`:\n    * `copyWithin()`\n    * `entries()`\n    * `fill()`\n    * `find()` ([a standalone shim is also available](https://github.com/paulmillr/Array.prototype.find))\n    * `findIndex()` ([a standalone shim is also available](https://github.com/paulmillr/Array.prototype.findIndex))\n    * `keys()` (note: keys/values/entries return an `ArrayIterator` object)\n    * `values()`\n    * `indexOf()` (ES6 errata)\n* `Object`:\n    * `assign()` ([a standalone shim is also available](https://github.com/ljharb/object.assign))\n    * `is()` ([a standalone shim is also available](https://github.com/ljharb/object-is))\n    * `keys()` (in ES5, but no longer throws on non-object non-null/undefined values in ES6)\n    * `setPrototypeOf()` (IE >= 11)\n* `Function.prototype`:\n    * `name` (es6-sham, covers IE 9-11)\n* `Math`:\n    * `acosh()`\n    * `asinh()`\n    * `atanh()`\n    * `cbrt()`\n    * `clz32()`\n    * `cosh()`\n    * `expm1()`\n    * `fround()`\n    * `hypot()`\n    * `imul()`\n    * `log10()`\n    * `log1p()`\n    * `log2()`\n    * `sign()`\n    * `sinh()`\n    * `tanh()`\n    * `trunc()`\n\nMath functions’ accuracy is 1e-11.\n\n* `Reflect`\n    * `apply()`\n    * `construct()`\n    * `defineProperty()`\n    * `deleteProperty()`\n    * `get()`\n    * `getOwnPropertyDescriptor()`\n    * `getPrototypeOf()`\n    * `has()`\n    * `isExtensible()`\n    * `ownKeys()`\n    * `preventExtensions()`\n    * `set()`\n    * `setPrototypeOf()`\n\n* `Symbol` (only if it already exists)\n    * `match` (and corresponding `String#match`, `String#startsWith`, `String#endsWith`, `String#includes`, `RegExp` support)\n    * `replace` (and corresponding `String#replace` support)\n    * `search` (and corresponding `String#search` support)\n    * `split` (and corresponding `String#split` support)\n\nWell-known symbols will only be provided if the engine already has `Symbol` support.\n\n* `String.prototype` Annex B HTML methods\n    * `anchor()`\n    * `big()`\n    * `blink()`\n    * `bold()`\n    * `fixed()`\n    * `fontcolor()`\n    * `fontsize()`\n    * `italics()`\n    * `link()`\n    * `small()`\n    * `strike()`\n    * `sub()`\n    * `sup()`\n\nThese methods are part of \"Annex B\", which means that although they are a defacto standard, you shouldn't use them. None the less, the `es6-shim` provides them and normalizes their behavior across browsers.\n\n## Subclassing\nThe `Map`, `Set`, and `Promise` implementations are subclassable.\nYou should use the following pattern to create a subclass in ES5 which will continue to work in ES6:\n```javascript\nrequire('es6-shim');\n\nfunction MyPromise(exec) {\n  var promise = new Promise(exec);\n  Object.setPrototypeOf(promise, MyPromise.prototype);\n  // ...\n  return promise;\n}\nObject.setPrototypeOf(MyPromise, Promise);\nMyPromise.prototype = Object.create(Promise.prototype, {\n  constructor: { value: MyPromise }\n});\n```\n\n## String.prototype.normalize\nIncluding a proper shim for `String.prototype.normalize` would increase the size of this library by a factor of more than 4.\nSo instead we recommend that you install the [`unorm`](https://github.com/walling/unorm) package alongside `es6-shim` if you need `String.prototype.normalize`.\nSee https://github.com/paulmillr/es6-shim/issues/134 for more discussion.\n\n\n## WeakMap shim\nIt is not possible to implement WeakMap in pure javascript.\nThe [es6-collections](https://github.com/WebReflection/es6-collections) implementation doesn't hold values strongly, which is critical for the collection. `es6-shim` decided to not include an incorrect shim.\n\n`WeakMap` has very unusual use-cases, so you probably won't need it at all (use simple `Map` instead).\n\n## Getting started\n\n```javascript\nrequire('es6-shim');\nvar assert = require('assert');\n\nassert.equal(true, 'abc'.startsWith('a'));\nassert.equal(false, 'abc'.endsWith('a'));\nassert.equal(true, 'john alice'.includes('john'));\nassert.equal('123'.repeat(2), '123123');\n\nassert.equal(false, NaN === NaN);\nassert.equal(true, Object.is(NaN, NaN));\nassert.equal(true, -0 === 0);\nassert.equal(false, Object.is(-0, 0));\n\nvar result = Object.assign({ a: 1 }, { b: 2 });\nassert.deepEqual(result, { a: 1, b: 2 });\n\nassert.equal(true, isNaN('a'));\nassert.equal(false, Number.isNaN('a'));\nassert.equal(true, Number.isNaN(NaN));\n\nassert.equal(true, isFinite('123'));\nassert.equal(false, Number.isFinite('123'));\nassert.equal(false, Number.isFinite(Infinity));\n\n// Tests if value is a number, finite,\n// >= -9007199254740992 && <= 9007199254740992 and floor(value) === value\nassert.equal(false, Number.isInteger(2.4));\n\nassert.equal(1, Math.sign(400));\nassert.equal(0, Math.sign(0));\nassert.equal(-1, Math.sign(-400));\n\nvar found = [5, 10, 15, 10].find(function (item) { return item / 2 === 5; });\nassert.equal(10, found);\n\nvar foundIndex = [5, 10, 15, 10].findIndex(function (item) { return item / 2 === 5; });\nassert.equal(1, foundIndex);\n\n// Replacement for `{}` key-value storage.\n// Keys can be anything.\nvar map = new Map([['Bob', 42], ['Foo', 'bar']]);\nmap.set('John', 25);\nmap.set('Alice', 400);\nmap.set(['meh'], 555);\nassert.equal(undefined, map.get(['meh'])); // undefined because you need to use exactly the same object.\nmap.delete('Alice');\nmap.keys();\nmap.values();\nassert.equal(4, map.size);\n\n// Useful for storing unique items.\nvar set = new Set([0, 1]);\nset.add(2);\nset.add(5);\nassert.equal(true, set.has(0));\nassert.equal(true, set.has(1));\nassert.equal(true, set.has(2));\nassert.equal(false, set.has(4));\nassert.equal(true, set.has(5));\nset.delete(5);\nassert.equal(false, set.has(5));\n\n// Promises, see\n// http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\n// https://github.com/petkaantonov/bluebird/#what-are-promises-and-why-should-i-use-them\nPromise.resolve(5).then(function (value) {\n  assert.equal(value, 5);\n  if (value) throw new Error('whoops!');\n  // do some stuff\n  return anotherPromise();\n}).catch(function (e) {\n  assert.equal(e.message, 'whoops!');\n  assert.equal(true, e instanceof Error);\n  // any errors thrown asynchronously end up here\n});\n```\n\n## Caveats\n\n - `Object.setPrototypeOf` / `Reflect.setPrototypeOf`\n   - Note that null objects (`Object.create(null)`, eg, an object with `null` as its `[[Prototype]]`) can not have their `[[Prototype]]` changed except via a native `Object.setPrototypeOf`.\n - Well-known `Symbol`s\n   - In order to make them work cross-realm, these are created with the global `Symbol` registry via `Symbol.for`. This does not violate the spec, but it does mean that `Symbol.for('Symbol.search') === Symbol.search` will be `true`, which it would not by default in a fresh compliant realm.\n\n## [License][license-url]\n\n[1]: https://travis-ci.org/paulmillr/es6-shim.svg\n[2]: https://travis-ci.org/paulmillr/es6-shim\n[3]: https://david-dm.org/paulmillr/es6-shim.svg\n[4]: https://david-dm.org/paulmillr/es6-shim\n[5]: https://david-dm.org/paulmillr/es6-shim/dev-status.svg\n[6]: https://david-dm.org/paulmillr/es6-shim#info=devDependencies\n[license-url]: https://github.com/paulmillr/es6-shim/blob/master/LICENSE\n[spec-html-url]: http://www.ecma-international.org/ecma-262/6.0/\n[es5-shim-url]: https://github.com/es-shims/es5-shim\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paulmillr/es6-shim/issues"
  },
  "_id": "es6-shim@0.35.0",
  "_shasum": "272d927950889eabe299927cdc9c0010b7bfc00a",
  "_from": "es6-shim@>=0.35.0 <0.36.0",
  "_resolved": "https://registry.npmjs.org/es6-shim/-/es6-shim-0.35.0.tgz"
}
